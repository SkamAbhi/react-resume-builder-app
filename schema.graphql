# ## schema.graphql
# interface Node {
#   id: ID!
# }

# type User implements Node {
#   id: ID!
#   name: String
# }

# type Query {
#   user(id: ID!): User
# }

# schema {
#   query: Query
# }
# schema.graphql
type Mutation {
  addNewPersonalInfo(input: AddNewPersonalInfoInput!): AddNewPersonalInfoPayload
  addNewEducation(input: AddNewEducationInput!): AddEducationPayload
  addNewResume(input: AddNewResumeInput!): AddNewResumePayload
  addNewProject(input:AddNewProjectInput!):AddNewProjectPayload
  addNewSkill(input: AddNewSkillInput!): AddNewSkillPayload!

}
input AddNewSkillInput {
  idResume: ID!
  skillName: String!
}
type AddNewSkillPayload {
  id: ID!
  success: Boolean!
}

input AddNewResumeInput {
  userId: String
  name: String
}

type AddNewResumePayload {
  success: Boolean
  id: ID!
}

type AddNewProjectPayload {
  success: Boolean
  id: ID!
}

input AddNewPersonalInfoInput {
  id: ID
  firstName: String
  lastName: String
  profession: String
  phone: String
  email: String
}

type AddNewPersonalInfoPayload {
  success: Boolean
  id: ID!
}

type PersonalInfo {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  birthdate: String
  email: String
  profession: String
  personalAddress: Address
  resume: Resume
}

type Address {
  street: String
  city: String
  state: String
  country: String
  zipcode: String
}

type Resume {
  id: ID!
  name: String
  user: User
}

type User {
  id: ID!
  name: String
  email: String
}
type Query {
  getPersonalInfo: PersonalInfo
  getEducationDetails(id: ID!): EducationDetails
}




type EducationDetails {
  id: ID!
  instituteName: String!
  instituteLocation: String!
  fieldOfStudy: String!
  startDate: String!
  endDate: String!
  currentlyAttendsHere: Boolean!
  resume: Resume
  createdAt: String!
  updatedAt: String!
  description: String!
  degree: String!
}

input AddNewEducationInput {
  instituteName: String!
  instituteLocation: String!
  degree: String!
  fieldOfStudy: String!
  startDate: String!
  endDate: String!
  description: String
}

type AddEducationPayload {
  success: Boolean!
  id: ID!
}

type Resume {
  id: ID!
  name: String
  user: User
}

input AddNewProjectInput {
  idResume: ID!
  projectName: String!
  role: String!
  technologies: [String!]
  description: String
  results: String
}